services:
  db:
    image: dgraph/standalone:v22.0.2
    restart: 'no'
    networks:
      - dgraphnet

  mq: 
    image: rabbitmq:3.11-management
    restart: 'no'
    networks:
      - dgraphnet
    configs:
      - source: mq-config
        target: /etc/rabbitmq/conf.d/rabbitmq.conf
      - source: mq-definitions
        target: /etc/rabbitmq/definitions.json

  db_init:
    build:
      context: ../dgraph-schema/  
    restart: 'no'
    networks:
      - dgraphnet
    environment:
      TIMEOUT: 20
      DGRAPH_SERVER: http://db:8080

  db_keywords:
    build:
      context: ../keyword-webhook/ 
    restart: 'no'
    networks:
      - dgraphnet
    depends_on:
      db_init:
        condition: service_completed_successfully 
      mq:
        condition: service_started
      indexer:
        condition: service_started
    configs:
      - source: kwconfig
        target: /etc/app/config.json

  # dspacer: 
  #   build:
  #     context: ../extraction-dspace/  
  #   restart: "no"
  #   networks:
  #     - dgraphnet
  #   depends_on:
  #     db_init:
  #       condition: service_completed_successfully 
  #   configs:
  #     - source: dcconfig
  #       target: /etc/app/config.json

  # adresolver: 
  #   build:
  #     context: ../ad-resolver/  
  #   restart: "no"
  #   networks:
  #     - dgraphnet
  #   depends_on:
  #     db_init:
  #       condition: service_completed_successfully
  #   env_file:
  #     - ./contrib/ad_config.env 

  # extraction_projects: 
  #   build:
  #     context: ../extraction-projects/  
  #   restart: "no"
  #   networks:
  #     - dgraphnet
  #   depends_on:
  #     db_init:
  #       condition: service_completed_successfully 
  #   env_file:
  #     - ./contrib/extraction_projects_config.env 

  # resolver_classification: 
  #   build:
  #     context: ../resolver-classification/
  #   restart: "no"
  #   networks:
  #     - dgraphnet
  #   depends_on:
  #     db_init:
  #       condition: service_completed_successfully 
  #   environment:
  #     DB_HOST: db:8080
  #     LOG_LEVEL: DEBUG

  # resolver_department: 
  #   build:
  #     context: ../resolver-department/
  #   restart: "no"
  #   networks:
  #     - dgraphnet
  #   depends_on:
  #     db_init:
  #       condition: service_completed_successfully 
  #   environment:
  #     DB_HOST: db:8080
  #     LOG_LEVEL: DEBUG

  indexer: 
    build:
      context: ../sdg-indexer/  
    restart: "no"
    deploy:
      mode: replicated
      replicas: 3
    networks:
      - dgraphnet
    depends_on:
      db_init:
        condition: service_completed_successfully
      mq:
        condition: service_started
    environment:
      BATCH_INTERVAL: 20
      DB_HOST: db:8080
      LOG_LEVEL: INFO
      
  #Â DEV ENVIRONMENT COMPONENTS
  # These tools provide access to query browsers and the reverse proxy

  caddy:
    image: caddy:2.6.2
    restart: 'no'
    configs:
      - source: caddyfile
        target: /etc/caddy/Caddyfile
    networks:
      - dgraphnet
    ports: 
      - target: 80
        published: 8080
  
  gql_browser: 
     image: caddy:2.6.2
     restart: 'no'
     networks:
      - dgraphnet
     volumes: 
      - ./contrib/graphiql:/usr/share/caddy

networks:
  dgraphnet:

configs:
  caddyfile:
    file: ./contrib/Caddyfile-backend
  sdconfig:
    file: ./contrib/dashboard_config.json
  dcconfig:
    file: ./contrib/digital_collection.json
  kwconfig:
    file: ./contrib/kwconfig.json
  mq-config:
    file: ./contrib/mq/rabbitmq.conf
  mq-definitions:
    file: ./contrib/mq/definitions.json

